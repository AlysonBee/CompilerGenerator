

{% for nonterm in nonterminals %}

void 	*create_{{ nonterm.grammarName }}(t_token *token_pattern, int &value) {
	
	t_{{ nonterm.grammarName }} *_{{ nonterm.grammarName }};

	*value = check_{{ nonterm.grammarName }}(token_pattern);
	{%- for descrip in nonterm.grammarDescription %}
	_{{ nonterm.grammarName }}->_{{ descrip }} = init_nonterm_{{ descrip }}();
	{%- endfor %}
	{%- for i, descrip in zip(range(0, nonterm.TEST_Len), nonterm.TEST_Duplicates) %}
	if checker == {{ i }}
	{
		*new_ptr = init_nonterm_{{ descrip }}()
		_{{ nonterm.grammarName }}->next = (t_info *)new_ptr;
		return (*void)new_ptr
	}
	{%- endfor %}
}


{% endfor %}

