var:var
mapping:ID
=:equ
map:map
[:openblock
string:DATATYPE
]:closeblock
int:DATATYPE
mapping:ID
=:equ
{:openbracket
value:ID
;:COLON
id:ID
,:COMMA
value2:ID
;:COLON
"HELLO":LITERAL
,:COMMA
subdict:ID
;:COLON
{:openbracket
data:ID
;:COLON
"string":LITERAL
,:COMMA
data2:ID
;:COLON
{:openbracket
value:ID
;:COLON
"STRING":LITERAL
,:COMMA
}:closebracket
,:COMMA
}:closebracket
:COMMA
y:ID
;:COLON
42:LITERAL
,:COMMA
}:closebracket
func:func
print:ID
(:openbrace
.:DOT
.:DOT
.:DOT
value:ID
string:DATATYPE
,:COMMA
value:ID
int:DATATYPE
):closebrace
{:openbracket
unistd:ID
.:DOT
write:ID
(:openbrace
1:LITERAL
,:COMMA
"Hello":LITERAL
,:COMMA
length:ID
):closebrace
}:closebracket
type:type
test:ID
struct:struct
{:openbracket
item1:ID
string:DATATYPE
item2:ID
int:DATATYPE
item3:ID
int:DATATYPE
item4:ID
string:DATATYPE
}:closebracket
func:func
(:openbrace
s:ID
*:STAR
test:ID
):closebrace
printout:ID
(:openbrace
):closebrace
{:openbracket
}:closebracket
var:var
hello:ID
=:equ
"hello":LITERAL
func:func
main:ID
(:openbrace
argc:ID
int:DATATYPE
,:COMMA
argv:ID
[:openblock
]:closeblock
string:DATATYPE
,:COMMA
third:ID
float:DATATYPE
,:COMMA
fourth:ID
[]int:DATATYPE
):closebrace
{:openbracket
var:var
test:ID
string:DATATYPE
print:ID
(:openbrace
):closebrace
var:var
x:ID
int:DATATYPE
print2:ID
(:openbrace
x:ID
,:COMMA
y:ID
,:COMMA
"LITERAL":LITERAL
):closebrace
var:var
test:ID
int:DATATYPE
type:type
test:ID
struct:struct
{:openbracket
item1:ID
string:DATATYPE
item2:ID
int:DATATYPE
item4:ID
int:DATATYPE
}:closebracket
var:var
t:ID
int:DATATYPE
for:for
(:openbrace
):closebrace
{:openbracket
print:ID
(:openbrace
"INFINITE LOOP":LITERAL
):closebrace
}:closebracket
int:DATATYPE
(:openbrace
"42":LITERAL
):closebrace
for:for
(:openbrace
i:ID
=:equ
0:LITERAL
;:SEMICOLON
i<42:condition
;:SEMICOLON
i++:math
):closebrace
print:ID
(:openbrace
):closebrace
}:closebracket